{"status":"ok","feed":{"url":"https://medium.com/feed/@@asaf.j.benjaminov","title":"Stories by Asaf Benjaminov on Medium","link":"https://medium.com/@asaf.j.benjaminov?source=rss-81bc8b438272------2","author":"","description":"Stories by Asaf Benjaminov on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/1*9DDqwMBOa49MawonE80DmA.jpeg"},"items":[{"title":"Persistence in Unity","pubDate":"2021-11-01 21:02:39","link":"https://medium.com/@asaf.j.benjaminov/persistence-in-unity-ad2fae13b45a?source=rss-81bc8b438272------2","guid":"https://medium.com/p/ad2fae13b45a","author":"Asaf Benjaminov","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*Y6oZ4qrH3z10OMf8IWa2ew.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y6oZ4qrH3z10OMf8IWa2ew.jpeg\"></figure><p>How bad does it feel when you forget to save your game progress?</p>\n<p>Let's make sure that doesn't happen. <br>Persistence in games is one of the more important aspects of them, we want to make sure that a player has not put the time in our game for\u00a0nothing.</p>\n<p>In this piece, I will suggest one very extensible way to implement a persistence system within your\u00a0game.</p>\n<p><strong>Structure</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UDSlZ9tYpqtebUlT-7xhkg.png\"></figure><p><strong>Persistence Handler</strong> <br>The handler is responsible for <em>handling</em> the modules, as in loading them using the assigned accessors and informing the modules once their accessors are done\u00a0loading.</p>\n<p><strong>Persistence Modules<br></strong>These are classes that live in the game lifecycle, hence they are MonoBehaviours that live on a GameObject in-game that should be living when the app starts and when the application ends. We make them MonoBehaviours and not ScriptableObjects since some of the times we want to access properties of the object in the scene directly from the editor which is not possible with scriptable objects (as displayed in the example later\u00a0on).</p>\n<p><strong>Persistence Accessors<br></strong>These classes are the ones writing and reading data from our source, it can be written in files on the machine, remote database, or even the registry.</p>\n<p>the structure of the system will include one handler, as many modules as needed for our game, and as many accessors we\u00a0like.</p>\n<p><strong>Serializable Models</strong><br>All of the above may use some classes for organizing data, all of them should be Serializable.</p>\n<p><strong>Example</strong></p>\n<p><strong>Module Accessors<br></strong>All module accessors are similar with their API, they can GetData, PersistData, Load, and Save the module. Each accessor can do it in his own way which the handler does not need to know of.<br>For this to be able we create a base abstract class which is also a scriptable object for easy configuration later\u00a0on.</p>\n<a href=\"https://medium.com/media/e724af63a37f5ca0eadd7ea69b271258/href\">https://medium.com/media/e724af63a37f5ca0eadd7ea69b271258/href</a><p>In our example, we will create one module accessor that uses binary files on the machine as a way of storing data. All operations will be performed synchronously for the sake of making this article shorter and conclusive.<br>Expanding your accessors for asynchronous work shouldn't be hard once we are finished. (Extra information about how this may be done at the end of the\u00a0article)</p>\n<a href=\"https://medium.com/media/e705ef7c02a0fe635c7f7717c7729ad5/href\">https://medium.com/media/e705ef7c02a0fe635c7f7717c7729ad5/href</a><p><strong>Persistence Modules<br></strong>Modules are classes that are in charge of fetching data from the accessors and setting data on them for saving, each module is responsible for a specific piece of information that we want to persist, in our example, we will create a PlayerPersistenceModule class that will responsible of saving all the player data that we want to be persisted in our game (Level, Hp, Position, etc\u2026).<br>We reference the player class from the editor for easy access and can then also set all the relevant properties.</p>\n<a href=\"https://medium.com/media/dc9e4df73c44262b6c282c34d5484af2/href\">https://medium.com/media/dc9e4df73c44262b6c282c34d5484af2/href</a><p>We can then build a module to save all the player data that we want our game to\u00a0store.</p>\n<a href=\"https://medium.com/media/7af9cbf0ed28b0d55b296232c64cc259/href\">https://medium.com/media/7af9cbf0ed28b0d55b296232c64cc259/href</a><p>We reference the Player class that can be some SciptableObject or another MonoBehaviour.</p>\n<p>Notice how the module only gets notified when the accessor loads the module and when it is saving and is only in charge of specifying the fields and objects it wants to\u00a0save.</p>\n<p>Another thing we notice here is that we can save entire objects as long as they are [Serializable] (can be specified with an attribute). Since the Unity Vector3 is not [Serializable] we need to create a [Serializeable] one we can store. We can store this way any data structure we\u00a0like.</p>\n<a href=\"https://medium.com/media/7b5b249bc73ab29b97b17899536a9bc2/href\">https://medium.com/media/7b5b249bc73ab29b97b17899536a9bc2/href</a><p><strong>The Handler</strong></p>\n<p>This class will contain list objects that are tuples connecting a module with its accessor. Some modules can be loaded asynchronously while others need to be loaded synchronously. Later on, we can even specify which modules are mandatory for the game to start and which are\u00a0not.</p>\n<a href=\"https://medium.com/media/98365d7aa1520569da0c472f5a9ea328/href\">https://medium.com/media/98365d7aa1520569da0c472f5a9ea328/href</a><a href=\"https://medium.com/media/645dd929fed3ce5a1f629db779b5b888/href\">https://medium.com/media/645dd929fed3ce5a1f629db779b5b888/href</a><p>It's important we load the modules in the start method since some modules may try to access MonoBehaviours and executing it in the Awake method may cause some unpredictable behavior.</p>\n<p>For the final touch, we want to let all our other game components that persistence loading is done, for this, we use a channel of communication that any game component can register to for any info regarding the persistence system.</p>\n<p>Notice that already in the handler we reference this channel to notify when the persistence has done its\u00a0loading.</p>\n<p>This system can be expanded in many many ways, but it is a great foundation for your first or any persistence system.</p>\n<p>For the full project click\u00a0<a href=\"https://github.com/abenjaminov/PersistenceSystem\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ad2fae13b45a\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y6oZ4qrH3z10OMf8IWa2ew.jpeg\"></figure><p>How bad does it feel when you forget to save your game progress?</p>\n<p>Let's make sure that doesn't happen. <br>Persistence in games is one of the more important aspects of them, we want to make sure that a player has not put the time in our game for\u00a0nothing.</p>\n<p>In this piece, I will suggest one very extensible way to implement a persistence system within your\u00a0game.</p>\n<p><strong>Structure</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UDSlZ9tYpqtebUlT-7xhkg.png\"></figure><p><strong>Persistence Handler</strong> <br>The handler is responsible for <em>handling</em> the modules, as in loading them using the assigned accessors and informing the modules once their accessors are done\u00a0loading.</p>\n<p><strong>Persistence Modules<br></strong>These are classes that live in the game lifecycle, hence they are MonoBehaviours that live on a GameObject in-game that should be living when the app starts and when the application ends. We make them MonoBehaviours and not ScriptableObjects since some of the times we want to access properties of the object in the scene directly from the editor which is not possible with scriptable objects (as displayed in the example later\u00a0on).</p>\n<p><strong>Persistence Accessors<br></strong>These classes are the ones writing and reading data from our source, it can be written in files on the machine, remote database, or even the registry.</p>\n<p>the structure of the system will include one handler, as many modules as needed for our game, and as many accessors we\u00a0like.</p>\n<p><strong>Serializable Models</strong><br>All of the above may use some classes for organizing data, all of them should be Serializable.</p>\n<p><strong>Example</strong></p>\n<p><strong>Module Accessors<br></strong>All module accessors are similar with their API, they can GetData, PersistData, Load, and Save the module. Each accessor can do it in his own way which the handler does not need to know of.<br>For this to be able we create a base abstract class which is also a scriptable object for easy configuration later\u00a0on.</p>\n<a href=\"https://medium.com/media/e724af63a37f5ca0eadd7ea69b271258/href\">https://medium.com/media/e724af63a37f5ca0eadd7ea69b271258/href</a><p>In our example, we will create one module accessor that uses binary files on the machine as a way of storing data. All operations will be performed synchronously for the sake of making this article shorter and conclusive.<br>Expanding your accessors for asynchronous work shouldn't be hard once we are finished. (Extra information about how this may be done at the end of the\u00a0article)</p>\n<a href=\"https://medium.com/media/e705ef7c02a0fe635c7f7717c7729ad5/href\">https://medium.com/media/e705ef7c02a0fe635c7f7717c7729ad5/href</a><p><strong>Persistence Modules<br></strong>Modules are classes that are in charge of fetching data from the accessors and setting data on them for saving, each module is responsible for a specific piece of information that we want to persist, in our example, we will create a PlayerPersistenceModule class that will responsible of saving all the player data that we want to be persisted in our game (Level, Hp, Position, etc\u2026).<br>We reference the player class from the editor for easy access and can then also set all the relevant properties.</p>\n<a href=\"https://medium.com/media/dc9e4df73c44262b6c282c34d5484af2/href\">https://medium.com/media/dc9e4df73c44262b6c282c34d5484af2/href</a><p>We can then build a module to save all the player data that we want our game to\u00a0store.</p>\n<a href=\"https://medium.com/media/7af9cbf0ed28b0d55b296232c64cc259/href\">https://medium.com/media/7af9cbf0ed28b0d55b296232c64cc259/href</a><p>We reference the Player class that can be some SciptableObject or another MonoBehaviour.</p>\n<p>Notice how the module only gets notified when the accessor loads the module and when it is saving and is only in charge of specifying the fields and objects it wants to\u00a0save.</p>\n<p>Another thing we notice here is that we can save entire objects as long as they are [Serializable] (can be specified with an attribute). Since the Unity Vector3 is not [Serializable] we need to create a [Serializeable] one we can store. We can store this way any data structure we\u00a0like.</p>\n<a href=\"https://medium.com/media/7b5b249bc73ab29b97b17899536a9bc2/href\">https://medium.com/media/7b5b249bc73ab29b97b17899536a9bc2/href</a><p><strong>The Handler</strong></p>\n<p>This class will contain list objects that are tuples connecting a module with its accessor. Some modules can be loaded asynchronously while others need to be loaded synchronously. Later on, we can even specify which modules are mandatory for the game to start and which are\u00a0not.</p>\n<a href=\"https://medium.com/media/98365d7aa1520569da0c472f5a9ea328/href\">https://medium.com/media/98365d7aa1520569da0c472f5a9ea328/href</a><a href=\"https://medium.com/media/645dd929fed3ce5a1f629db779b5b888/href\">https://medium.com/media/645dd929fed3ce5a1f629db779b5b888/href</a><p>It's important we load the modules in the start method since some modules may try to access MonoBehaviours and executing it in the Awake method may cause some unpredictable behavior.</p>\n<p>For the final touch, we want to let all our other game components that persistence loading is done, for this, we use a channel of communication that any game component can register to for any info regarding the persistence system.</p>\n<p>Notice that already in the handler we reference this channel to notify when the persistence has done its\u00a0loading.</p>\n<p>This system can be expanded in many many ways, but it is a great foundation for your first or any persistence system.</p>\n<p>For the full project click\u00a0<a href=\"https://github.com/abenjaminov/PersistenceSystem\">here</a>.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ad2fae13b45a\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["tutorial","persistence","c-sharp-programming","unity","game-development"]},{"title":"Scriptable Objects for beginners","pubDate":"2021-10-27 17:17:30","link":"https://medium.com/@asaf.j.benjaminov/scriptable-objects-for-beginners-8c93a46183a1?source=rss-81bc8b438272------2","guid":"https://medium.com/p/8c93a46183a1","author":"Asaf Benjaminov","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*v1f7dUWduOpY-XyiHmy8cA.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v1f7dUWduOpY-XyiHmy8cA.png\"></figure><p>Scriptable Objects in Unity are very frightening at first.<br>Even some very experienced programmers can have a hard time getting their heads wrapped around this\u00a0subject.</p>\n<p><strong>So, what exactly are they?<br></strong>Think of Scriptable Objects as self-made assets for your game, like all the other assets, they hold data. Once you write a scriptable object, you can then create an asset of that type and all the public serializable properties can be edited and instantly saved.</p>\n<p>For example, if we would like to provide a default key bind for a player but also make it so that the player is able to change them and save, a scriptable object would be perfect for that.<br>We can make an asset (ScriptableObject) that stores all the key binds, use it as a reference for actions within our code (since it's a c# class), and also use it as a configuration class that we can serialize when the player changes and wants to save his new key\u00a0binds.</p>\n<a href=\"https://medium.com/media/a75abd2317148dd24679c1d184ebf6ce/href\">https://medium.com/media/a75abd2317148dd24679c1d184ebf6ce/href</a><p><strong>CreateAssetMenu attribute<br></strong>This attribute allows you to tell the editor that this is a class that can be created as an asset through the context menu in the project tab in unity, under \u201cCreate\u201d.<br>The two properties that you need to provide are the fileName which is the default name of the asset file that will be created and the menuName which is actually a path in the menu, so for this file <br>Create -&gt; Game Configuration -&gt;Keyboard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/985/1*kQGXJinLVeZpP_vpzdBRvg.png\"><figcaption>Right click in the project\u00a0window</figcaption></figure><p><strong>Common usages for ScriptableObjects<br></strong>As we discussed earlier, ScriptableObjects are \u201csmart\u201d assets, like other assets they store data but what makes them smart is that we can slip into their lifecycle with some logic of our\u00a0own.</p>\n<p>We discussed shortly one common use for ScriptableObjects that is Configuration (Keyboard, Levels, Scenes,\u00a0etc..).</p>\n<p><strong>Entity Information<br></strong>Another common use is for storing information for some kind of game entity.<br>For example, there can be many enemies in a game but each enemy has unique health, strength, defense, and many more attributes, all of these can be represented via ScriptableObjects to represent all of this data and then referenced from the Enemy Monobehaviour for in-game\u00a0usage.</p>\n<a href=\"https://medium.com/media/31190786dd387953dddc3a1482805a55/href\">https://medium.com/media/31190786dd387953dddc3a1482805a55/href</a><p>And now we can create an EnemyInfo asset from the project context menu and link it to a MonoBehaviour we created in our\u00a0code</p>\n<a href=\"https://medium.com/media/ccff47823e92f3c72b473af46aa3acda/href\">https://medium.com/media/ccff47823e92f3c72b473af46aa3acda/href</a><p>This way we can create multiple enemy types from the same prefab that has an Enemy script attached to\u00a0it.</p>\n<p><strong>Communication between entities<br></strong>Scriptable objects can also be used for communication between entities in your\u00a0code.</p>\n<p>Let's take as an example a case where the player has completed a level and we would like to load the next level, notify the stats in the interface and increase the player experience.</p>\n<p>Well start off by defining a \u201cChannel\u201d Scriptable object, its only purpose is to enable communication between entities in different places around our game by exposing events and enabling invocation of those\u00a0events.</p>\n<a href=\"https://medium.com/media/e0b676d032564c0df4c9799042dcbfe4/href\">https://medium.com/media/e0b676d032564c0df4c9799042dcbfe4/href</a><p>The level channel has a level completed event that we will use when finishing a level.<br>We can have something trigger this event once the level is done, for example, some sort of finish line that has a trigger enter\u00a0event.</p>\n<a href=\"https://medium.com/media/d166b2b2ef73eec5be87e193e6c33359/href\">https://medium.com/media/d166b2b2ef73eec5be87e193e6c33359/href</a><p>We can then react to the event by subscribing to it from different elements in our\u00a0code.</p>\n<a href=\"https://medium.com/media/3ef182e451ae5efe5d925e9d6d4a9c82/href\">https://medium.com/media/3ef182e451ae5efe5d925e9d6d4a9c82/href</a><a href=\"https://medium.com/media/01a1bc29ddf2166be68abe5ca996a9eb/href\">https://medium.com/media/01a1bc29ddf2166be68abe5ca996a9eb/href</a><p>We subscribe in the Awake method with a function that handles how the class reacts to the event and also don't forget to unsubscribe in the OnDestroy method.</p>\n<p>We can follow this structure for the other features that we stated above.<br>This way a simple asset that is also a scriptable object can be passed around through components in our game.<br>The Player, UI, or any other component doesn't need to know about the FinishLineTrigger existence and only about the fact that a level can be completed.</p>\n<p>Scriptable Objects are a great tool to make your code Modular and extensible.<br>Application of these basic methods will improve the level of your codebase by a\u00a0notch.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8c93a46183a1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*v1f7dUWduOpY-XyiHmy8cA.png\"></figure><p>Scriptable Objects in Unity are very frightening at first.<br>Even some very experienced programmers can have a hard time getting their heads wrapped around this\u00a0subject.</p>\n<p><strong>So, what exactly are they?<br></strong>Think of Scriptable Objects as self-made assets for your game, like all the other assets, they hold data. Once you write a scriptable object, you can then create an asset of that type and all the public serializable properties can be edited and instantly saved.</p>\n<p>For example, if we would like to provide a default key bind for a player but also make it so that the player is able to change them and save, a scriptable object would be perfect for that.<br>We can make an asset (ScriptableObject) that stores all the key binds, use it as a reference for actions within our code (since it's a c# class), and also use it as a configuration class that we can serialize when the player changes and wants to save his new key\u00a0binds.</p>\n<a href=\"https://medium.com/media/a75abd2317148dd24679c1d184ebf6ce/href\">https://medium.com/media/a75abd2317148dd24679c1d184ebf6ce/href</a><p><strong>CreateAssetMenu attribute<br></strong>This attribute allows you to tell the editor that this is a class that can be created as an asset through the context menu in the project tab in unity, under \u201cCreate\u201d.<br>The two properties that you need to provide are the fileName which is the default name of the asset file that will be created and the menuName which is actually a path in the menu, so for this file <br>Create -&gt; Game Configuration -&gt;Keyboard.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/985/1*kQGXJinLVeZpP_vpzdBRvg.png\"><figcaption>Right click in the project\u00a0window</figcaption></figure><p><strong>Common usages for ScriptableObjects<br></strong>As we discussed earlier, ScriptableObjects are \u201csmart\u201d assets, like other assets they store data but what makes them smart is that we can slip into their lifecycle with some logic of our\u00a0own.</p>\n<p>We discussed shortly one common use for ScriptableObjects that is Configuration (Keyboard, Levels, Scenes,\u00a0etc..).</p>\n<p><strong>Entity Information<br></strong>Another common use is for storing information for some kind of game entity.<br>For example, there can be many enemies in a game but each enemy has unique health, strength, defense, and many more attributes, all of these can be represented via ScriptableObjects to represent all of this data and then referenced from the Enemy Monobehaviour for in-game\u00a0usage.</p>\n<a href=\"https://medium.com/media/31190786dd387953dddc3a1482805a55/href\">https://medium.com/media/31190786dd387953dddc3a1482805a55/href</a><p>And now we can create an EnemyInfo asset from the project context menu and link it to a MonoBehaviour we created in our\u00a0code</p>\n<a href=\"https://medium.com/media/ccff47823e92f3c72b473af46aa3acda/href\">https://medium.com/media/ccff47823e92f3c72b473af46aa3acda/href</a><p>This way we can create multiple enemy types from the same prefab that has an Enemy script attached to\u00a0it.</p>\n<p><strong>Communication between entities<br></strong>Scriptable objects can also be used for communication between entities in your\u00a0code.</p>\n<p>Let's take as an example a case where the player has completed a level and we would like to load the next level, notify the stats in the interface and increase the player experience.</p>\n<p>Well start off by defining a \u201cChannel\u201d Scriptable object, its only purpose is to enable communication between entities in different places around our game by exposing events and enabling invocation of those\u00a0events.</p>\n<a href=\"https://medium.com/media/e0b676d032564c0df4c9799042dcbfe4/href\">https://medium.com/media/e0b676d032564c0df4c9799042dcbfe4/href</a><p>The level channel has a level completed event that we will use when finishing a level.<br>We can have something trigger this event once the level is done, for example, some sort of finish line that has a trigger enter\u00a0event.</p>\n<a href=\"https://medium.com/media/d166b2b2ef73eec5be87e193e6c33359/href\">https://medium.com/media/d166b2b2ef73eec5be87e193e6c33359/href</a><p>We can then react to the event by subscribing to it from different elements in our\u00a0code.</p>\n<a href=\"https://medium.com/media/3ef182e451ae5efe5d925e9d6d4a9c82/href\">https://medium.com/media/3ef182e451ae5efe5d925e9d6d4a9c82/href</a><a href=\"https://medium.com/media/01a1bc29ddf2166be68abe5ca996a9eb/href\">https://medium.com/media/01a1bc29ddf2166be68abe5ca996a9eb/href</a><p>We subscribe in the Awake method with a function that handles how the class reacts to the event and also don't forget to unsubscribe in the OnDestroy method.</p>\n<p>We can follow this structure for the other features that we stated above.<br>This way a simple asset that is also a scriptable object can be passed around through components in our game.<br>The Player, UI, or any other component doesn't need to know about the FinishLineTrigger existence and only about the fact that a level can be completed.</p>\n<p>Scriptable Objects are a great tool to make your code Modular and extensible.<br>Application of these basic methods will improve the level of your codebase by a\u00a0notch.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8c93a46183a1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["assets","scriptableobject","unity","games","game-development"]},{"title":"Implementing a scalable Quest System","pubDate":"2021-08-11 11:49:38","link":"https://medium.com/@asaf.j.benjaminov/implementing-a-scalable-quest-system-7f36ea4cfe22?source=rss-81bc8b438272------2","guid":"https://medium.com/p/7f36ea4cfe22","author":"Asaf Benjaminov","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*-PE0n6_1MK6JhUc72xM_CQ.jpeg","description":"\n<p>Quests systems in 3 parts, theory, design, and implementation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-PE0n6_1MK6JhUc72xM_CQ.jpeg\"><figcaption>Quests take us to unexpected and amazing\u00a0places.</figcaption></figure><p>In many game genres, a story is told through game quests. In others, quests are a side mechanic that gives the player some motivation and a feel of progression.<br>To understand how to build a Quest System, first, we need to have a grasp of what a System is (programmatically) and what a Quest is. Only then we can combine the two for a true understanding of what the Quest System is, and start thinking about its implementation.</p>\n<p>If you have a solid understanding of what a System or a Quest is<em> </em>when it comes to game development, feel free to skip this next theoretical part.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SIxxRzvlJ7tMKSS9MWfveQ.png\"></figure><h3>System</h3>\n<blockquote>an organized set of ideas or theories or a particular way of doing something. <br>-Oxford Dictionary</blockquote>\n<p>In Software development and specifically in game dev, a system is a closed logical concept that when implemented, handles all things related to that concept using different elements (classes, interfaces,\u00a0..)</p>\n<p>A few examples of systems by name are <em>Combat System</em>, <em>Inventory System</em>, <em>Chat System</em>, <em>Save\\Load System, </em>etc; following the previous paragraph, for example, the <em>Combat System</em> is responsible for all things <em>Combat</em> such as Interaction between entities during combat, what the players can or can\u2019t do at every phase, and combat\u00a0outcome.</p>\n<p>Most of the things that you can think of that are combat-related could belong to the <em>Combat\u00a0System</em>.</p>\n<p>Systems are destined to interact with one another, should I say, react to one another, an example for that is, the <em>UI System</em> will most likely react when the enemy or player gets hit, information which will come from the <em>Combat\u00a0System</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iCD3UziNEQcpWat_dYE9iA.png\"></figure><h3>Quest</h3>\n<blockquote>a long search for something,\u00a0\u2026 -Oxford Dictionary</blockquote>\n<p>Well, in our context quests aren't always long, but normally we do search for something (or someone).</p>\n<p>In software development, quests can be named in many different ways such as challenges, missions, checkpoints, and many more.<br>The most common name in game dev is \u201cquest<em>\u201d</em> so we\u2019ll use that\u00a0one.</p>\n<p>A quest is an attempt to fulfill (trigger) a game event or multiple game events. By doing so the player gains some in-game continuity in the form of another quest, reward, revealing new content, and much\u00a0more!</p>\n<p>Some examples of quests\u00a0are:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/300/1*8GSfyI2XlzmibjLAPyIE6Q.jpeg\"><figcaption>Disneys\u2019 Hercules</figcaption></figure><ul>\n<li>Defeat the Nemean\u00a0Lion</li>\n<li>Steal 3 golden\u00a0apples</li>\n<li>Craft 5 food\u00a0rations</li>\n</ul>\n<p>So what game events should be triggered for these quests to be complete?</p>\n<p>When defeating enemies there will probably be an event triggered by the <em>Combat System</em> with information about the defeated enemy and its\u00a0type.</p>\n<p>When collecting (or stealing) items there will probably be an event triggered by the <em>Inventory System</em><strong><em> </em></strong>with information about the item and the amount that has been collected.</p>\n<p>When crafting rations, well I'm certain you get the point by\u00a0now.</p>\n<p>Up till now, we've covered what a <em>System </em>is and what a <em>Quest</em> is, now we can easily combine these two to form the <strong>Quest system. </strong>You\u2019ll be surprised how simple it is once we deeply understood both\u00a0phrases.</p>\n<h3>Quest System</h3>\n<p>This is the system that is responsible for all things quest-related.</p>\n<ul>\n<li>Assignment</li>\n<li>Tracking</li>\n<li>Completion</li>\n</ul>\n<p>Another responsibility of this system is to inform the environment (other systems) about events related to quests and these events are pretty much paired with the list\u00a0above.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JZv30scvn8ctJHgYY9PDng.png\"></figure><p>To design the quest system, we need to heavily lean on our knowledge of systems, quest, and quest systems. We know that the quest system should consist of elements that represent the properties that we listed above, and we understand that the quest system should inform the environment about events related to\u00a0quests.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*x-kc5WOVVwNvua0mydefOA.png\"><figcaption>Quest system general\u00a0flow</figcaption></figure><p>The orange square is our focus in this article and we will make sure that our quest system can start listening to events occurring in other systems so it can start tracking a quests progress and can also inform the environment (other systems) about the quests progress.</p>\n<h3>Quest Channel</h3>\n<p>The quest channel is the pipeline element that connects the quest system elements and other systems, I like to include it in the quest system (which is a totally abstract context) since it is related to \u201cAll things quest\u201d like we defined earlier.<br>The channel will mainly invoke events related to quest state changes so the environment can react.<br>We\u2019ll elaborate more on that once we get to implementing it.</p>\n<h3>Quest</h3>\n<p>There are many different types of quests, we've seen a few examples earlier. Before we dive into implementation we need to figure out what is common to all of\u00a0them.</p>\n<ul>\n<li>UniqueId, to avoiding confusion between different quests</li>\n<li>Name, every quest must have a\u00a0name.</li>\n<li>State, any given quest is in some state, either pending, active, or completed. Maybe more complex quest systems have more states but these are basic in my\u00a0opinion.</li>\n<li>Requirments, quests can have requirements like a level requirement or maybe even completion of another quest as a requirement.</li>\n<li>Rewards, almost every quest has a list of rewards that it grants; experience, currency, items, and much\u00a0more.</li>\n<li>Quest Channel, Every quest must acknowledge the existence of the Quest Channel.<br><em>Reminder: This is the systems\u2019 pipeline to the environment.</em>\n</li>\n</ul>\n<h3>Quest Type</h3>\n<p>After we have an understanding of what properties an abstract quest has, we can think about specific quest types such as \u201cDefeat enemies quest\u201d, \u201cCollect items quest\u201d, \u201cReach location quest\u201d, \u201cTalk to NPC quest\u201d, and so on. <br>Each type of quest has its own attributes and reacts to events from different systems.</p>\n<p>In our implementation of a quest system, we will work with 2 different types of\u00a0quests</p>\n<ol>\n<li>\n<strong>Defeat enemies quest<br></strong>In addition to the abstract quest properties, this quest needs to be assigned with an enemy id\\type and a number that represents how many enemies of the given type need to be defeated.<br>We will probably need some pipeline to the combat system for information on when an enemy is defeated.<br>We would also like to enable the user to exit mid quest with progress being\u00a0saved.</li>\n<li>\n<strong>Collect items quest<br></strong>The concept is very similar here, we need some item id so that when we receive information from the inventory pipeline about a change in the inventory quantities we can monitor it to determine whether the quest is completed.<br>Here we would like to check if the user meets the conditions of the quest immediately when he receives\u00a0it.</li>\n</ol>\n<h3><strong>Other Elements Of the Quest\u00a0System</strong></h3>\n<p>We can keep on writing lists of properties for the other elements of the quest system which in our case are the <strong>reward types</strong> and the <strong>requirement types<br></strong>but we won't since it isn't the main subject of this read and in the implementation part, the responsibilities of these elements will become clear.<br>The main tip I can give you while deciding which elements you need for your quest system, and designing these elements is to keep it simple, each element should be a closed idea responsible for all things related to that simplified idea (like a mini\u00a0system).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iGaUyJCcoj19JrBesQC7pg.png\"></figure><p>This part assumes some knowledge in writing code, OOP, and C#, feel free to ask about anything unclear in the comments\u00a0section!</p>\n<p>Another thing worth mentioning is that the following implementation for a quest system is my own and there are many different ways to get the same results, our quest system is very basic, so we can have a deep understanding of the main principles.</p>\n<p>I feel like the thing that defines this system the most is the state of a given quest so we\u2019ll start\u00a0there.</p>\n<a href=\"https://medium.com/media/6ac0aae8d1d70d93136162282cab5202/href\">https://medium.com/media/6ac0aae8d1d70d93136162282cab5202/href</a><p>There are three states for a quest in our\u00a0system</p>\n<ul>\n<li>Pending, for when the quest hasn't started\u00a0yet.</li>\n<li>Active, for when the quest has started and given to the\u00a0player.</li>\n<li>Complete, for when the quest is fulfilled and rewards were handed\u00a0out.</li>\n</ul>\n<p>Another thing that is very basic and necessary for communication with the environment is the quest\u00a0channel</p>\n<a href=\"https://medium.com/media/9f76b1d80f11a1ecff34739664d0ceb5/href\">https://medium.com/media/9f76b1d80f11a1ecff34739664d0ceb5/href</a><p>The QuestChannel class is very basic and consists of two events that can be subscribed to from the outside, the class also has two methods for triggering its events, also for use of the environment.<br>For example, an NPC grants the player a quest when finishing a conversation with the player and triggers the \u201cAssignQuest\u201d method.</p>\n<p>Next, we will dive into the Quest class, this is a longer bit of code, but don't worry, we\u2019ll figure out how each part relates to ideas we've talked about\u00a0earlier.</p>\n<a href=\"https://medium.com/media/516a4dcfc19429bc609e1bce0ff7905d/href\">https://medium.com/media/516a4dcfc19429bc609e1bce0ff7905d/href</a><p><strong>Lines 3\u20139:</strong> we can see all the properties relevant for an abstract quest, we will keep the requirement and reward elements simple in our example, and only hand out experience as a reward and the requirement for confirming a quest activation will only be a level requirement.</p>\n<p><strong>Lines 11\u201320 (Enable)</strong>: This function is in charge of event registration and setup for the quest, you can see that we subscribe for events triggered by the quest channel which is our pipeline to other components of our game\\software.<br>We then check if the quest is already active (maybe we turned our game off mid quest) and then activate the current quest.<br>This method is like a constructor in a sense, I didn't make a constructor since in some places a quest can be saved as an asset that is enabled on startup and this method is\u00a0called.</p>\n<p><strong>Lines 22\u201326 (Disable)</strong>: Just make sure you always remember to unsubscribe from events when the game\\software is closing or the object is destroyed.</p>\n<p><strong>Lines 28\u201336 (QuestActiveEvent, QuestActive):</strong> This is the method triggered once the quest channel wants to activate an event, here we make sure that indeed the current quest has been activated (line 30), change the state of the quest, and trigger the internal activating method which is next (line 36) and is abstract so classes inheriting from quest can implement it with their own\u00a0needs.</p>\n<p><strong>Lines 38\u201346 (QuestCompletedEvent, QuestCompleted): </strong>The same concept applies here but for quest completion events triggered by the quest\u00a0channel.</p>\n<p><strong>Lines 48\u201351 (Complete): </strong>This method is for of the inheriting children use and finalizes the completion of the quest by triggering an event on the quest\u00a0channel.</p>\n<p>What about rewards? Let's see an example.<br>This quest system rewards only experience, what we'll do is make the PlayerStats class grab that reward once it can. How does it know when that is?\u00a0Events.</p>\n<a href=\"https://medium.com/media/b56d497fa58e83d95f59ac439cd757bd/href\">https://medium.com/media/b56d497fa58e83d95f59ac439cd757bd/href</a><p>Not much to elaborate on here, we make sure we are subscribed for quest completed events and grab the reward it grants us, then we let the environment know that the player received some experience! (maybe the UI needs to update? maybe we want some fireworks and text? maybe a level up has occurred?)</p>\n<h3><strong>Quick Summary</strong></h3>\n<p>We have laid out all the foundations for our quest system and can now extend it with unique quests and functionalities. Good\u00a0work!</p>\n<p>I\u2019ll show 2 examples for expanding our quest system that are kinda similar but are important in my\u00a0eyes.</p>\n<ol><li><strong>CollectItemQuest</strong></li></ol>\n<a href=\"https://medium.com/media/2fb0f7390d87c1347f72d50d35cb9456/href\">https://medium.com/media/2fb0f7390d87c1347f72d50d35cb9456/href</a><p>This quest type has the user gathering items, unless he's lucky and already has them in his inventory.</p>\n<p>First of all, let's acknowledge the inheritance from the Quest class (line\u00a01).</p>\n<p>Next, we have the properties for this quest\u00a0type</p>\n<ul>\n<li>InventoryChannel, this is the pipeline of the inventory system to the environment, we need it so we know when items have been added to the inventory.</li>\n<li>_inventoryItemMeta, the item type that we need to collect, should have some unique identifier.</li>\n<li>_amountToCollect, how many items should the player\u00a0collect.</li>\n<li>_playerInventory, a quest about items should acknowledge the inventory, we need to be subscribed to events related to change in item\u00a0amounts</li>\n</ul>\n<p><strong>Lines 9\u201315 (TryComplete): </strong>We receive an item from the inventory, check if it's the correct item, and if we have a sufficient amount to complete the quest, if so we complete it (line 13\u200a\u2014\u200aremember the method from the Quest\u00a0class?)</p>\n<p><strong>Lines 17\u201327 (QuestActive): </strong>If you remember this is the abstract method we had in the Quest class that all inheriting classes must implement.<br>When the quest is activated we need to subscribe to the inventory channel event related to item amount changes and then check if maybe the player has the amount required for the quest so we can complete the quest right\u00a0away.</p>\n<p><strong>Lines 34\u201340 (ItemAddedEvent):</strong> Triggered when an item has been added to inventory, we compare ids to make sure it is relevant, if so, try and complete the\u00a0quest.</p>\n<p><strong>2. DefeatEnemiesQuest</strong></p>\n<p>We introduce here a new concept, some quests need to load a state when\u00a0enabled.</p>\n<a href=\"https://medium.com/media/23bddf586ded7da150ee7f957ce89af9/href\">https://medium.com/media/23bddf586ded7da150ee7f957ce89af9/href</a><p>First of all, let\u2019s acknowledge the inheritance from the Quest class (line\u00a01).</p>\n<p>Next, we have the properties for this quest\u00a0type</p>\n<ul>\n<li>CombatChannel, the pipeline from the combat system to the environment, we need it so we know when an enemy has been defeated.</li>\n<li>_enemyToDefeat, the enemy the player should defeat, should have some unique identifier.</li>\n<li>NumberOfEnemiesToDefeat, how many enemies the player needs to defeat for the quest to be completed.</li>\n<li>_actualEnemiesDefeated, this is an internal\u00a0counter.</li>\n</ul>\n<p><strong>Lines 9\u201313 (Enable):</strong> We override the Enable method from the Quest class since we need some unique functionality for this quest type when the game starts and quests are enabled, if we close our game mid quest, and then log back in, we want to load the progress made by the player.<br>For simplicity, this is done in the Enable method but we won't elaborate on Save\\Load systems in this\u00a0article.</p>\n<p><strong>Lines 16\u201324 (QuestActive, QuestCompleted): </strong>Subscribe and Unsubscribe from the EnemyDefeatedEvent on the combat system, this helps us determine when the player has made progress.</p>\n<p><strong>Lines 26\u201336 (EnemyDefeatedEvent): </strong>Triggered by the CombatChannel, we check for relevance (line 28), increase the counter for defeated enemies, and check if the quest has been completed (line 32), if so we call the Completed method located in the parent Quest\u00a0class.</p>\n<h3>What can we do\u00a0next?</h3>\n<p>The first thing I would do is try and implement a different reward than experience, maybe an\u00a0item?</p>\n<p>Quest systems can be one of the most complex systems in a game. <br>If we have a strong base for our system, and our environment is built to communicate fluently through events and systems are well defined, we can expand it easily without much\u00a0effort.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f36ea4cfe22\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>Quests systems in 3 parts, theory, design, and implementation.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-PE0n6_1MK6JhUc72xM_CQ.jpeg\"><figcaption>Quests take us to unexpected and amazing\u00a0places.</figcaption></figure><p>In many game genres, a story is told through game quests. In others, quests are a side mechanic that gives the player some motivation and a feel of progression.<br>To understand how to build a Quest System, first, we need to have a grasp of what a System is (programmatically) and what a Quest is. Only then we can combine the two for a true understanding of what the Quest System is, and start thinking about its implementation.</p>\n<p>If you have a solid understanding of what a System or a Quest is<em> </em>when it comes to game development, feel free to skip this next theoretical part.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*SIxxRzvlJ7tMKSS9MWfveQ.png\"></figure><h3>System</h3>\n<blockquote>an organized set of ideas or theories or a particular way of doing something. <br>-Oxford Dictionary</blockquote>\n<p>In Software development and specifically in game dev, a system is a closed logical concept that when implemented, handles all things related to that concept using different elements (classes, interfaces,\u00a0..)</p>\n<p>A few examples of systems by name are <em>Combat System</em>, <em>Inventory System</em>, <em>Chat System</em>, <em>Save\\Load System, </em>etc; following the previous paragraph, for example, the <em>Combat System</em> is responsible for all things <em>Combat</em> such as Interaction between entities during combat, what the players can or can\u2019t do at every phase, and combat\u00a0outcome.</p>\n<p>Most of the things that you can think of that are combat-related could belong to the <em>Combat\u00a0System</em>.</p>\n<p>Systems are destined to interact with one another, should I say, react to one another, an example for that is, the <em>UI System</em> will most likely react when the enemy or player gets hit, information which will come from the <em>Combat\u00a0System</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iCD3UziNEQcpWat_dYE9iA.png\"></figure><h3>Quest</h3>\n<blockquote>a long search for something,\u00a0\u2026 -Oxford Dictionary</blockquote>\n<p>Well, in our context quests aren't always long, but normally we do search for something (or someone).</p>\n<p>In software development, quests can be named in many different ways such as challenges, missions, checkpoints, and many more.<br>The most common name in game dev is \u201cquest<em>\u201d</em> so we\u2019ll use that\u00a0one.</p>\n<p>A quest is an attempt to fulfill (trigger) a game event or multiple game events. By doing so the player gains some in-game continuity in the form of another quest, reward, revealing new content, and much\u00a0more!</p>\n<p>Some examples of quests\u00a0are:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/300/1*8GSfyI2XlzmibjLAPyIE6Q.jpeg\"><figcaption>Disneys\u2019 Hercules</figcaption></figure><ul>\n<li>Defeat the Nemean\u00a0Lion</li>\n<li>Steal 3 golden\u00a0apples</li>\n<li>Craft 5 food\u00a0rations</li>\n</ul>\n<p>So what game events should be triggered for these quests to be complete?</p>\n<p>When defeating enemies there will probably be an event triggered by the <em>Combat System</em> with information about the defeated enemy and its\u00a0type.</p>\n<p>When collecting (or stealing) items there will probably be an event triggered by the <em>Inventory System</em><strong><em> </em></strong>with information about the item and the amount that has been collected.</p>\n<p>When crafting rations, well I'm certain you get the point by\u00a0now.</p>\n<p>Up till now, we've covered what a <em>System </em>is and what a <em>Quest</em> is, now we can easily combine these two to form the <strong>Quest system. </strong>You\u2019ll be surprised how simple it is once we deeply understood both\u00a0phrases.</p>\n<h3>Quest System</h3>\n<p>This is the system that is responsible for all things quest-related.</p>\n<ul>\n<li>Assignment</li>\n<li>Tracking</li>\n<li>Completion</li>\n</ul>\n<p>Another responsibility of this system is to inform the environment (other systems) about events related to quests and these events are pretty much paired with the list\u00a0above.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JZv30scvn8ctJHgYY9PDng.png\"></figure><p>To design the quest system, we need to heavily lean on our knowledge of systems, quest, and quest systems. We know that the quest system should consist of elements that represent the properties that we listed above, and we understand that the quest system should inform the environment about events related to\u00a0quests.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*x-kc5WOVVwNvua0mydefOA.png\"><figcaption>Quest system general\u00a0flow</figcaption></figure><p>The orange square is our focus in this article and we will make sure that our quest system can start listening to events occurring in other systems so it can start tracking a quests progress and can also inform the environment (other systems) about the quests progress.</p>\n<h3>Quest Channel</h3>\n<p>The quest channel is the pipeline element that connects the quest system elements and other systems, I like to include it in the quest system (which is a totally abstract context) since it is related to \u201cAll things quest\u201d like we defined earlier.<br>The channel will mainly invoke events related to quest state changes so the environment can react.<br>We\u2019ll elaborate more on that once we get to implementing it.</p>\n<h3>Quest</h3>\n<p>There are many different types of quests, we've seen a few examples earlier. Before we dive into implementation we need to figure out what is common to all of\u00a0them.</p>\n<ul>\n<li>UniqueId, to avoiding confusion between different quests</li>\n<li>Name, every quest must have a\u00a0name.</li>\n<li>State, any given quest is in some state, either pending, active, or completed. Maybe more complex quest systems have more states but these are basic in my\u00a0opinion.</li>\n<li>Requirments, quests can have requirements like a level requirement or maybe even completion of another quest as a requirement.</li>\n<li>Rewards, almost every quest has a list of rewards that it grants; experience, currency, items, and much\u00a0more.</li>\n<li>Quest Channel, Every quest must acknowledge the existence of the Quest Channel.<br><em>Reminder: This is the systems\u2019 pipeline to the environment.</em>\n</li>\n</ul>\n<h3>Quest Type</h3>\n<p>After we have an understanding of what properties an abstract quest has, we can think about specific quest types such as \u201cDefeat enemies quest\u201d, \u201cCollect items quest\u201d, \u201cReach location quest\u201d, \u201cTalk to NPC quest\u201d, and so on. <br>Each type of quest has its own attributes and reacts to events from different systems.</p>\n<p>In our implementation of a quest system, we will work with 2 different types of\u00a0quests</p>\n<ol>\n<li>\n<strong>Defeat enemies quest<br></strong>In addition to the abstract quest properties, this quest needs to be assigned with an enemy id\\type and a number that represents how many enemies of the given type need to be defeated.<br>We will probably need some pipeline to the combat system for information on when an enemy is defeated.<br>We would also like to enable the user to exit mid quest with progress being\u00a0saved.</li>\n<li>\n<strong>Collect items quest<br></strong>The concept is very similar here, we need some item id so that when we receive information from the inventory pipeline about a change in the inventory quantities we can monitor it to determine whether the quest is completed.<br>Here we would like to check if the user meets the conditions of the quest immediately when he receives\u00a0it.</li>\n</ol>\n<h3><strong>Other Elements Of the Quest\u00a0System</strong></h3>\n<p>We can keep on writing lists of properties for the other elements of the quest system which in our case are the <strong>reward types</strong> and the <strong>requirement types<br></strong>but we won't since it isn't the main subject of this read and in the implementation part, the responsibilities of these elements will become clear.<br>The main tip I can give you while deciding which elements you need for your quest system, and designing these elements is to keep it simple, each element should be a closed idea responsible for all things related to that simplified idea (like a mini\u00a0system).</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*iGaUyJCcoj19JrBesQC7pg.png\"></figure><p>This part assumes some knowledge in writing code, OOP, and C#, feel free to ask about anything unclear in the comments\u00a0section!</p>\n<p>Another thing worth mentioning is that the following implementation for a quest system is my own and there are many different ways to get the same results, our quest system is very basic, so we can have a deep understanding of the main principles.</p>\n<p>I feel like the thing that defines this system the most is the state of a given quest so we\u2019ll start\u00a0there.</p>\n<a href=\"https://medium.com/media/6ac0aae8d1d70d93136162282cab5202/href\">https://medium.com/media/6ac0aae8d1d70d93136162282cab5202/href</a><p>There are three states for a quest in our\u00a0system</p>\n<ul>\n<li>Pending, for when the quest hasn't started\u00a0yet.</li>\n<li>Active, for when the quest has started and given to the\u00a0player.</li>\n<li>Complete, for when the quest is fulfilled and rewards were handed\u00a0out.</li>\n</ul>\n<p>Another thing that is very basic and necessary for communication with the environment is the quest\u00a0channel</p>\n<a href=\"https://medium.com/media/9f76b1d80f11a1ecff34739664d0ceb5/href\">https://medium.com/media/9f76b1d80f11a1ecff34739664d0ceb5/href</a><p>The QuestChannel class is very basic and consists of two events that can be subscribed to from the outside, the class also has two methods for triggering its events, also for use of the environment.<br>For example, an NPC grants the player a quest when finishing a conversation with the player and triggers the \u201cAssignQuest\u201d method.</p>\n<p>Next, we will dive into the Quest class, this is a longer bit of code, but don't worry, we\u2019ll figure out how each part relates to ideas we've talked about\u00a0earlier.</p>\n<a href=\"https://medium.com/media/516a4dcfc19429bc609e1bce0ff7905d/href\">https://medium.com/media/516a4dcfc19429bc609e1bce0ff7905d/href</a><p><strong>Lines 3\u20139:</strong> we can see all the properties relevant for an abstract quest, we will keep the requirement and reward elements simple in our example, and only hand out experience as a reward and the requirement for confirming a quest activation will only be a level requirement.</p>\n<p><strong>Lines 11\u201320 (Enable)</strong>: This function is in charge of event registration and setup for the quest, you can see that we subscribe for events triggered by the quest channel which is our pipeline to other components of our game\\software.<br>We then check if the quest is already active (maybe we turned our game off mid quest) and then activate the current quest.<br>This method is like a constructor in a sense, I didn't make a constructor since in some places a quest can be saved as an asset that is enabled on startup and this method is\u00a0called.</p>\n<p><strong>Lines 22\u201326 (Disable)</strong>: Just make sure you always remember to unsubscribe from events when the game\\software is closing or the object is destroyed.</p>\n<p><strong>Lines 28\u201336 (QuestActiveEvent, QuestActive):</strong> This is the method triggered once the quest channel wants to activate an event, here we make sure that indeed the current quest has been activated (line 30), change the state of the quest, and trigger the internal activating method which is next (line 36) and is abstract so classes inheriting from quest can implement it with their own\u00a0needs.</p>\n<p><strong>Lines 38\u201346 (QuestCompletedEvent, QuestCompleted): </strong>The same concept applies here but for quest completion events triggered by the quest\u00a0channel.</p>\n<p><strong>Lines 48\u201351 (Complete): </strong>This method is for of the inheriting children use and finalizes the completion of the quest by triggering an event on the quest\u00a0channel.</p>\n<p>What about rewards? Let's see an example.<br>This quest system rewards only experience, what we'll do is make the PlayerStats class grab that reward once it can. How does it know when that is?\u00a0Events.</p>\n<a href=\"https://medium.com/media/b56d497fa58e83d95f59ac439cd757bd/href\">https://medium.com/media/b56d497fa58e83d95f59ac439cd757bd/href</a><p>Not much to elaborate on here, we make sure we are subscribed for quest completed events and grab the reward it grants us, then we let the environment know that the player received some experience! (maybe the UI needs to update? maybe we want some fireworks and text? maybe a level up has occurred?)</p>\n<h3><strong>Quick Summary</strong></h3>\n<p>We have laid out all the foundations for our quest system and can now extend it with unique quests and functionalities. Good\u00a0work!</p>\n<p>I\u2019ll show 2 examples for expanding our quest system that are kinda similar but are important in my\u00a0eyes.</p>\n<ol><li><strong>CollectItemQuest</strong></li></ol>\n<a href=\"https://medium.com/media/2fb0f7390d87c1347f72d50d35cb9456/href\">https://medium.com/media/2fb0f7390d87c1347f72d50d35cb9456/href</a><p>This quest type has the user gathering items, unless he's lucky and already has them in his inventory.</p>\n<p>First of all, let's acknowledge the inheritance from the Quest class (line\u00a01).</p>\n<p>Next, we have the properties for this quest\u00a0type</p>\n<ul>\n<li>InventoryChannel, this is the pipeline of the inventory system to the environment, we need it so we know when items have been added to the inventory.</li>\n<li>_inventoryItemMeta, the item type that we need to collect, should have some unique identifier.</li>\n<li>_amountToCollect, how many items should the player\u00a0collect.</li>\n<li>_playerInventory, a quest about items should acknowledge the inventory, we need to be subscribed to events related to change in item\u00a0amounts</li>\n</ul>\n<p><strong>Lines 9\u201315 (TryComplete): </strong>We receive an item from the inventory, check if it's the correct item, and if we have a sufficient amount to complete the quest, if so we complete it (line 13\u200a\u2014\u200aremember the method from the Quest\u00a0class?)</p>\n<p><strong>Lines 17\u201327 (QuestActive): </strong>If you remember this is the abstract method we had in the Quest class that all inheriting classes must implement.<br>When the quest is activated we need to subscribe to the inventory channel event related to item amount changes and then check if maybe the player has the amount required for the quest so we can complete the quest right\u00a0away.</p>\n<p><strong>Lines 34\u201340 (ItemAddedEvent):</strong> Triggered when an item has been added to inventory, we compare ids to make sure it is relevant, if so, try and complete the\u00a0quest.</p>\n<p><strong>2. DefeatEnemiesQuest</strong></p>\n<p>We introduce here a new concept, some quests need to load a state when\u00a0enabled.</p>\n<a href=\"https://medium.com/media/23bddf586ded7da150ee7f957ce89af9/href\">https://medium.com/media/23bddf586ded7da150ee7f957ce89af9/href</a><p>First of all, let\u2019s acknowledge the inheritance from the Quest class (line\u00a01).</p>\n<p>Next, we have the properties for this quest\u00a0type</p>\n<ul>\n<li>CombatChannel, the pipeline from the combat system to the environment, we need it so we know when an enemy has been defeated.</li>\n<li>_enemyToDefeat, the enemy the player should defeat, should have some unique identifier.</li>\n<li>NumberOfEnemiesToDefeat, how many enemies the player needs to defeat for the quest to be completed.</li>\n<li>_actualEnemiesDefeated, this is an internal\u00a0counter.</li>\n</ul>\n<p><strong>Lines 9\u201313 (Enable):</strong> We override the Enable method from the Quest class since we need some unique functionality for this quest type when the game starts and quests are enabled, if we close our game mid quest, and then log back in, we want to load the progress made by the player.<br>For simplicity, this is done in the Enable method but we won't elaborate on Save\\Load systems in this\u00a0article.</p>\n<p><strong>Lines 16\u201324 (QuestActive, QuestCompleted): </strong>Subscribe and Unsubscribe from the EnemyDefeatedEvent on the combat system, this helps us determine when the player has made progress.</p>\n<p><strong>Lines 26\u201336 (EnemyDefeatedEvent): </strong>Triggered by the CombatChannel, we check for relevance (line 28), increase the counter for defeated enemies, and check if the quest has been completed (line 32), if so we call the Completed method located in the parent Quest\u00a0class.</p>\n<h3>What can we do\u00a0next?</h3>\n<p>The first thing I would do is try and implement a different reward than experience, maybe an\u00a0item?</p>\n<p>Quest systems can be one of the most complex systems in a game. <br>If we have a strong base for our system, and our environment is built to communicate fluently through events and systems are well defined, we can expand it easily without much\u00a0effort.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7f36ea4cfe22\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["quest-system","gamedev","games","development","code"]}]}